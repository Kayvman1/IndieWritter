{"version":3,"sources":["logo.svg","poems/comps.js","lookup/comps.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PoemsComp","props","titleRef","React","createRef","contentRef","useState","newPoems","setNewPoem","className","onSubmit","event","preventDefault","console","log","tempNewPoems","unshift","title","content","id","like","ref","name","required","type","ListPoem","poemsInit","setPoemsInit","poems","setPoems","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","send","loadPoems","alert","map","item","index","Poem","poem","key","ActionBtn","action","actionDisplay","display","userLike","setUserLike","likes","setLikes","onClick","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.756bfed6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useEffect, useState} from 'react'\nimport {loadPoems} from '../lookup'\n\nexport function PoemsComp (props){\n  const titleRef = React.createRef()\n  const contentRef = React.createRef()\n  const [newPoems,setNewPoem] = useState([])\n\n  const handleSubmit = (event) =>{\n    event.preventDefault()\n    console.log(event)\n    let tempNewPoems = [...newPoems]\n    tempNewPoems.unshift({\n      title : 'poop',\n      content : 'nopoop',\n      id : '12412424',\n      like: '124'\n    })\n\n    setNewPoem(tempNewPoems)\n  }\n\n  return <div className = {props.className}>\n  <div className = 'col-12 mb-3'>\n    <form onSubmit = {handleSubmit}>\n      <textarea ref = {titleRef} className = 'form-control' name ='title' required={true}></textarea>\n      <textarea ref = {contentRef} className = 'form-control' name ='content' required ={true}></textarea>\n      <button type = 'submit' className = 'btn btn-primary my-3'> post </button>\n    </form>\n    </div>\n    <ListPoem newPoems = {newPoems}/>\n  </div>\n}\n\n\nexport  function ListPoem(props){\n  const [poemsInit, setPoemsInit] = useState([])\n  const [poems, setPoems] = useState([])\n\n\n  useEffect( ()=>{\n    const final = [...props.newPoems].concat(poemsInit)\n    if (final.length !== poems.length){\n      setPoems(final)\n    }\n  },[poemsInit, props.newPoems, poems])\n\n\n  useEffect(() => {\n    const myCallback = (response, status) =>{\n      if(status === 200){\n        setPoemsInit(response)\n      }\n      else{\n        alert (\"There was an error\")\n      }\n    }\n    loadPoems(myCallback)\n  }, [] )\n\n  return  poems.map((item, index)=>{\n      return <Poem poem = {item} className = 'my-5 py-5 border bg-white text-dark' key ={`${index}-item.id`}/>\n      }\n    )\n  }\n\n \nexport function ActionBtn(props){\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n    const {poem,action} = props\n    const actionDisplay = action.display? action.display: 'action'\n    const [userLike, setUserLike] = useState(poem.userLike === true ? true : false)\n    const [likes,setLikes] = useState( poem.likes ? poem.likes : 0)\n\n    const display = action.type === 'like' ? `${action.display} ${likes}`: actionDisplay\n    const handleClick = (event) => {\n      event.preventDefault()\n      if (action.type === 'like'){\n        if (userLike === true){\n          setLikes(likes - 1)\n          setUserLike (false)\n        }else {\n          setLikes(likes + 1)\n          setUserLike ( true )         \n        }\n      }}\n    return  <button className = {className}  onClick = {handleClick}>    {display} </button>\n  \n  }\n  \nexport  function Poem(props){\n    const {poem} = props\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n    return <div className = {className}>\n      <h4>{poem.title}</h4> \n      <p>{poem.content}</p>\n      <div className = 'btn btn-group'>\n        <ActionBtn poem = {poem} action ={{type:\"like\", display : 'Likes'}}/>\n        <ActionBtn poem = {poem} action ={{type:\"unlike\", display: 'Unlike'}}/>\n        <ActionBtn poem = {poem} action ={{type:\"repub\", display: 'Repub'}}/>\n\n        \n      </div>\n    </div>\n  }\n  ","\nexport function loadPoems (callback) {\n    const xhr = new XMLHttpRequest()\n    xhr.responseType = \"json\"\n    xhr.open ('GET', \"http://127.0.0.1:8000/api/poems/\")\n    \n    xhr.onload = function(){\n      callback(xhr.response, xhr.status)\n    }\n  \n    xhr.onerror = function(e){\n      console.log(e)\n      callback({\"message\": \"The request was an error\"}, 400)\n    }\n    xhr.send()\n  }","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {PoemsComp} from './poems'\n\n\n\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n         <PoemsComp/>\n        </div>\n        \n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}